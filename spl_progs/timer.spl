// calculate pid of current process
alias currentPID S0;
currentPID = (PTBR - 1024) / 8;

//calculate the start of pcb of current process
alias currentPCB S1;
currentPCB = READY_LIST + 32 * currentPID;

//saving the context of current process in its pcb
[ currentPCB + 1 ] = 1; // Set STATE to READY
[ currentPCB + 2 ] = BP;
[ currentPCB + 3 ] = SP - 1; 

alias physicalSP S2;
physicalSP = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512); //calculate physical address of stack top 

[ currentPCB + 4 ] = [ physicalSP ]; // Save IP of current process in the PCB from the stack

[ currentPCB + 5 ] = PTBR;
[ currentPCB + 6 ] = PTLR;

[ currentPCB + 7 ] = R0;
[ currentPCB + 8 ] = R1;
[ currentPCB + 9 ] = R2;
[ currentPCB + 10 ] = R3;
[ currentPCB + 11 ] = R4;
[ currentPCB + 12 ] = R5;
[ currentPCB + 13 ] = R6;
[ currentPCB + 14 ] = R7; 

//round robin scheduling
alias newPID S3;
alias newPCB S4;
newPID = ([ currentPCB + 0 ] + 1 ) % 32; //initalise newpid to pid of next process
while( [READY_LIST + newPID*32 + 1] != 1) do //scans untill process with newPID is ready
	newPID = (newPID + 1) % 32;
endwhile;
newPCB = READY_LIST + newPID * 32;

//load register values of new process from its PCB
BP = [newPCB + 2];
SP = [newPCB + 3];
PTBR = [newPCB + 5];
PTLR = [newPCB + 6];
R0 = [newPCB + 7];
R1 = [newPCB + 8];
R2 = [newPCB + 9];
R3 = [newPCB + 10];
R4 = [newPCB + 11];
R5 = [newPCB + 12];
R6 = [newPCB + 13];
R7 = [newPCB + 14];

SP = SP + 1;
alias newphysicalSP S2;
newphysicalSP = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512);
[ newphysicalSP ] = [ newPCB + 4 ]; // Stores IP field value of PCB on the stack

[ newPCB + 1 ] = 2; // Set STATE to RUNNING

ireturn;
